ADD_ON_INSTRUCTION_DEFINITION DUCO_AI_Function (Description := "Analog Input Data Processing",
	                                                Revision := "1.0",
	                                                ExecutePrescan := No,
	                                                ExecutePostscan := No,
	                                                ExecuteEnableInFalse := No,
	                                                CreatedDate := "2016-03-30T20:32:15.687Z",
	                                                CreatedBy := "Mark Dodd",
	                                                EditedDate := "2017-02-04T21:44:00.191Z",
	                                                EditedBy := "WIN-PPVKF9AK0BU\Duco",
	                                                SoftwareRevision := "v20.04")
		
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Analog : DUCO_AI_DATA (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			Alarms : DUCO_Alarm_Bits (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			LL_SP : REAL (Usage := Output,
			                 RADIX := Float,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0.00000000e+000);
			L_SP : REAL (Usage := Output,
			                RADIX := Float,
			                Required := No,
			                Visible := Yes,
			                ExternalAccess := Read/Write,
			                DefaultData := 0.00000000e+000);
			H_SP : REAL (Usage := Output,
			                RADIX := Float,
			                Required := No,
			                Visible := Yes,
			                ExternalAccess := Read/Write,
			                DefaultData := 0.00000000e+000);
			HH_SP : REAL (Usage := Output,
			                 RADIX := Float,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0.00000000e+000);
			LL_Latched : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			L_Latched : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			H_Latched : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			HH_Latched : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Failed_Latched : BOOL (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			PV : REAL (Usage := Output,
			              RADIX := Float,
			              Required := No,
			              Visible := Yes,
			              ExternalAccess := Read/Write,
			              DefaultData := 0.00000000e+000);
			PV_Min : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			PV_Max : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
		END_PARAMETERS

		LOCAL_TAGS
			SCP : DUCO_SCP (ExternalAccess := None,
			              DefaultData := "[1,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			SCP_ma : DUCO_SCP (ExternalAccess := None,
			                 DefaultData := "[1,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			HH_ALARM : DUCO_Alarm_Function (ExternalAccess := None,
			                   DefaultData := "[1,[0,0,0]]");
			HH_In : BOOL (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			H_In : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			L_In : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			LL_In : BOOL (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			H_ALARM : DUCO_Alarm_Function (ExternalAccess := None,
			                  DefaultData := "[1,[0,0,0]]");
			L_ALARM : DUCO_Alarm_Function (ExternalAccess := None,
			                  DefaultData := "[1,[0,0,0]]");
			LL_ALARM : DUCO_Alarm_Function (ExternalAccess := None,
			                   DefaultData := "[1,[0,0,0]]");
			Failed_In : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			HH_SP_Hys : REAL (RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			LL_SP_Hys : REAL (RADIX := Float,
			                    ExternalAccess := None,
			                    DefaultData := 0.00000000e+000);
			L_SP_Hys : REAL (RADIX := Float,
			                   ExternalAccess := None,
			                   DefaultData := 0.00000000e+000);
			H_SP_Hys : REAL (RADIX := Float,
			                   ExternalAccess := None,
			                   DefaultData := 0.00000000e+000);
			Failed_ALARM : DUCO_Alarm_Function (ExternalAccess := None,
			                       DefaultData := "[1,[0,0,0]]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: NOP();
				RC: "********************************************************************$N"
				    "Scaling$N"
				    "********************************************************************";
				N: DUCO_SCP(SCP_ma,Analog.Raw,Analog.CFG.Raw.Min,Analog.CFG.Raw.Max,4.0,20.0,Analog.ma)DUCO_SCP(SCP,Analog.Raw,Analog.CFG.Raw.Min,Analog.CFG.Raw.Max,Analog.CFG.PV.Min,Analog.CFG.PV.Max,Analog.PV);
				RC: "********************************************************************$N"
				    "Create alarm input bits$N"
				    "********************************************************************";
				N: SUB(Analog.HH.SP,Analog.CFG.Hysterisis,HH_SP_Hys)LES(Analog.PV,Analog.HH.SP)[LES(Analog.PV,HH_SP_Hys) ,XIC(HH_In) ]OTE(HH_In);
				N: SUB(Analog.H.SP,Analog.CFG.Hysterisis,H_SP_Hys)LES(Analog.PV,Analog.H.SP)[LES(Analog.PV,H_SP_Hys) ,XIC(H_In) ]OTE(H_In);
				N: ADD(Analog.L.SP,Analog.CFG.Hysterisis,L_SP_Hys)GRT(Analog.PV,Analog.L.SP)[GRT(Analog.PV,L_SP_Hys) ,XIC(L_In) ]OTE(L_In);
				N: ADD(Analog.LL.SP,Analog.CFG.Hysterisis,LL_SP_Hys)GRT(Analog.PV,Analog.LL.SP)[GRT(Analog.PV,LL_SP_Hys) ,XIC(LL_In) ]OTE(LL_In);
				N: LIM(Analog.CFG.Fail.Min,Analog.mA,Analog.CFG.Fail.Max)XIC(Analog.Fault)OTE(Failed_In);
				N: DUCO_Timed_Bypass(Analog.BypassAOI,Analog.Bypass,Alarms.Reset);
				RC: "********************************************************************$N"
				    "Generate Alarms$N"
				    "********************************************************************";
				N: DUCO_Alarm_Function(HH_ALARM,HH_In,Analog.HH,Alarms)DUCO_Alarm_Function(H_ALARM,H_In,Analog.H,Alarms)DUCO_Alarm_Function(L_ALARM,L_In,Analog.L,Alarms)DUCO_Alarm_Function(LL_ALARM,LL_In,Analog.LL,Alarms)DUCO_Alarm_Function(Failed_ALARM,Failed_In,Analog.Failed,Alarms);
				RC: "********************************************************************$N"
				    "Mapping for Display in the Ladder$N"
				    "- not to be used (can be if you want to I suppose)$N"
				    "********************************************************************";
				N: MOV(Analog.PV,PV)MOV(Analog.CFG.PV.Min,PV_Min)MOV(Analog.CFG.PV.Max,PV_Max)MOV(Analog.LL.SP,LL_SP)MOV(Analog.L.SP,L_SP)MOV(Analog.H.SP,H_SP)MOV(Analog.HH.SP,HH_SP);
				N: XIC(Analog.LL.Latched)OTE(LL_Latched);
				N: XIC(Analog.L.Latched)OTE(L_Latched);
				N: XIC(Analog.H.Latched)OTE(H_Latched);
				N: XIC(Analog.HH.Latched)OTE(HH_Latched);
				N: XIC(Analog.Failed.Latched)OTE(Failed_Latched);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION